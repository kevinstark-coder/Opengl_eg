#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;
varying vec3 fragmentColor;

// Values that stay constant for the whole mesh.

uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPositions_worldspace[4];
uniform float LightPower[4];
uniform int useTexture;
uniform int NumLights;
void main(){
	
	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	vec3 MaterialDiffuseColor;
	// Material properties
	   if (useTexture == 1) {
        MaterialDiffuseColor = texture2D(myTextureSampler, UV).rgb;
    } else {
        MaterialDiffuseColor = fragmentColor;
    }

	vec3 MaterialAmbientColor = vec3(0.5,0.5,0.5) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	gl_FragColor.rgb=MaterialAmbientColor;
    for (int i = 0; i < NumLights; i++) {
        // Calculate the distance to the current light source
        float distance = length(LightPositions_worldspace[i] - Position_worldspace);

        // Calculate lighting contribution from the current light source
        vec3 n = normalize(Normal_cameraspace);
        vec3 l = normalize(LightPositions_worldspace[i] - Position_worldspace);
        float cosTheta = clamp(dot(n, l), 0, 1);

        vec3 E = normalize(EyeDirection_cameraspace);
        vec3 R = reflect(-l, n);
        float cosAlpha = clamp(dot(E, R), 0, 1);

		gl_FragColor.rgb += 
		// Diffuse : "color" of the object
		(MaterialDiffuseColor * LightColor * LightPower[0] * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower[0] * pow(cosAlpha,5) / (distance*distance)
		);
}


}